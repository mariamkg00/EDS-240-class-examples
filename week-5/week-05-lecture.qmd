## Enhancing Visualizations Part I

#### Lecture 5.1

What makes a good data viz?

Choosing the right graphic form is the first step! It's important to consider how you can enhance your visualization by:

-   applying pre-made and custom color palettes

-   updating fonts

-   adding annotations

-   fine tuning themes

-   centering our primary message

Good data visualization

-   data-ink ratio

-   how to reduce eye movement and improve readability/interpretability

-   putting things in context

-   how to draw the main attention to the most important info

-   consistent use of colors, spacing, typefaces and weights

Simplify plots to reduce eye movement and readability/interpretability

data ink ratio = data-ink/total ink used to print the graphic

Remove redundant legend information

-   doing so increases the data-ink ratio and reduces overall eye movement

-   Add direct labels and minimize rotated text

    -   we can use a combination of `coord_flip()` , `geom_text()`, to further eliminate non-data ink and reduce overall eye movement

Move the legend (positioning)

-   reduce eye movement by updating the legend position

What doesn't work so well in data visualization?

Good data visualization design generally avoids:

-   information overload

-   dual axes

-   pie charts

our job is to make it as easy as possible for our readers to understand our data without having to do mental gymnastics

There may be circumstances where it may be effective

Consider some of the approaches we've already discussed

-   highlighting the most important values/groups

-   faceting

-   creating separate visualizations

-   cohesive and intuitive color scheme

or some that we haven't covered

-   create interactive tables or visualizations

```{r}
library(tidyverse)
library(palmerpenguins)

# categorical var-----
cat_color_plot <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +
  geom_point(size = 4, alpha = 0.8)

cat_color_plot 


# continuous var-----
cont_color_plot <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) 

cont_color_plot 
```

Viridis

```{r}
cat_color_plot +
  scale_color_viridis_d(option = 'viridis', direction = -1)


cont_color_plot+
  scale_color_viridis_c(option = 'magma')
```

RColorBrewer

```{r}
RColorBrewer::display.brewer.all(colorblindFriendly = TRUE)


RColorBrewer::display.brewer.pal(n = 4, name = 'Dark2')

my_pal <- RColorBrewer::brewer.pal(n=4, name = 'Dark2')



cat_color_plot +
  scale_color_brewer(palette = 'Dark2')


cont_color_plot + 
  scale_color_distiller(palette = 'BuPu')


cont_color_plot +
  scale_color_fermenter(palette = "YlGnBu")
```

Tip : outline points

```{r}
ggplot(penguins, aes(x = bill_length_mm, 
                     y = bill_depth_mm, 
                     color = body_mass_g)) +
  geom_point(shape = 21, size = 4, alpha = 0.8) +
  scale_fill_distiller(palette = 'BuPu')
```

Use redunsant mapping whenever possible

There are so many other great pre-made color palettes to explore, many which take into consideration color vision deficiencies (but always double check)

```{r}
cat_color_plot +
  paleteer::scale_color_paletteer_d("calecopal::superbloom3")

my_parks_palette <- NatParksPalettes::natpark.pals(name = 'WindCave', n = 20,
                                                   type = 'continuous')


```

Climate and environmental science visualizations

Want to design your own palette?

Use color wheels identify color harmonies

Save color palette outside ggplot

```{r}
my_palette <- c("#32DE8A", "#E36414", "#0F4C5C")

cat_color_plot +
  scale_color_manual(values = my_palette)
```

```{r}
my_palette <- c("#32DE8A", "#E36414", "#0F4C5C")
my_palette_named <- c("Adelie" = "#32DE8A","Chinstrap" = "#E36414", "Gentoo" = "#0F4C5C")
```

scale\_\*\_identity()

```{r}
test <- penguins %>% 
  mutate(
    my_color = case_when(
      bill_length_mm < 40 ~ "#D7263D",
      between(bill_length_mm, 40, 50) ~ "#E4BB87"
      bill_length_mm > 50 ~ "#386150"
    )
  ) %>% 
  ggplot(aes(x = bill_depth_mm,
             y = bill_depth_mm, 
             color = my_color)) + 
  geom_point(size = 4, alpha = 0.7)+
  scale_color_identity()


penguins %>% 
  mutate(my_color = case_when(
    body_mass_g > 6000 ~ "#D7263d",
    TRUE ~ "gray"
  )) %>% 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm, 
             color = my_color)) + 
  geom_point(size = 4, alpha = 0.7)+
  scale_color_identity(guide = 'legend',
                       name = 'Body mass (g)',
                       labels = c(">6000",
                                  "<=6000"))
```

High saturation = greater / more important values

It's okay to use saturated/brighter colors in moderation.

We tend to associate more saturated colors with greater values.

Let's explore county-level precipitation data using a chloropleth map; importantly, we'll decide on a color palette/ scale type and make any necessary adjustments

chloropleths are maps that display the spatial distribution of a variable across divided geographical areas/regions, where variable is envoded by color

Simple features are comprised of

-   a geometry object that describes where on Earth the feature is located

-   attribute data associated with the geometry object

```{r message = FALSE, warning = FALSE}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(tigris)

#.........................get shape data.........................
county_geo <- tigris::counties(class = "sf", cb = TRUE) |> # cb = TRUE to use cartographic boundary files
  
  # shift US to fit AK, HI, PR (we'll be filtering these out though) and transform CRS to USA Contiguous Albers Equal Area Conic (ESRI:102003) ----
  shift_geometry()

#....................import precipitation data...................
precip_data <- read_csv(("data/county-jan19-dec23-precip.csv"),skip = 4)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle geometries  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~

county_geo_wrangled <- county_geo |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county & state cols ----
  rename(county = namelsad, state = state_name) |>
  
  # remove states / territories that we don't have precip data for ----
  filter(!state %in% c("Alaska", "Hawaii", "District of Columbia",
                       "United States Virgin Islands", "Puerto Rico", "American Samoa",
                       "Commonwealth of the Northern Mariana Islands", "Guam")) |>
  
  # capitalize "city" (VA) ----
  mutate(county = str_replace(string = county, pattern = " city", replacement = " City"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle precipitation data  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

precip_wrangled <- precip_data |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county col ----
  rename(county = name) |>
  
  # filter out DC ----
  filter(!county %in% c("Washington, D.C.")) |>
  
  # update name to match that in county_geo df ----
  mutate(county = str_replace(string = county, pattern = "Dona Ana County", replacement = "DoÃ±a Ana County")) |>
  
  # coerce precip & 20th centruy avg from chr to numeric ----
  mutate(value = as.numeric(value),
         x1901_2000_mean = as.numeric(x1901_2000_mean)) |>
  
  # calculate % change ----
  mutate(perc_change = ((value - x1901_2000_mean)/x1901_2000_mean)*100) |>
  
  # select, rename, reorder cols ----
  select(id, state, county, mean_1901_2000 = x1901_2000_mean, precip = value, perc_change, anomaly_1901_2000_base_period)

##~~~~~~~~~~~~~~~~~~
##  ~ join dfs  ----
##~~~~~~~~~~~~~~~~~~

# join dfs (be sure to join precip TO sf object, not the other way around) -------
joined_precip_geom <- full_join(county_geo_wrangled, precip_wrangled) 

```

Use a classed color scale if you want to communicate statistical brackets:

-   the focus is on which data fall into pre-defined classes, rather than overall pattern

-   best if you want your audience to read values

Use an unclassed color scale if you want to show general patterns:

-   the focus is on general patterns, rather than which statistical brackets regions fall into

-   best if you don't want to interpret for your reader - it makes it easier to see outliers, transitions to and comparisons with neighboring regions

Base map

```{r}
base_map <- ggplot(joined_precip_geom)+
  geom_sf(aes(fill = perc_change))+
  labs(title = '5-year precipitation compared with the 20th century average',
       subtitle = "January 2019 - December 2023",
       caption ="Source: National Centers for Environmental Information")+
  theme_void()+
  theme(legend.position = 'bottom', 
        legend.title = element_blank(),
        plot.caption = element_text(face = 'italic',
                                    margin = margin(t = 2,
                                                    r = 0.5,
                                                    b = 0,
                                                    l = 0, "lines"))
        )

base_map
```

```{r}
RColorBrewer::display.brewer.pal(n = 11, name = 'BrBG')

my_brew_palette11 <- RColorBrewer::brewer.pal(n = 11, name = 'BrBG')



# make map 
base_map +
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(                         min(na.omit(joined_precip_geom$perc_change),
                             0),
                         max(na.omit(joined_precip_geom$perc_change)))
                       ))+
  # customizing the legend dimensions
  guides(fill = guide_colorbar(barwidth = 15, barheight = 0.75))
```

Classed map

```{r}

my_brew_palette10 <- RColorBrewer::brewer.pal(n = 10, name = 'BrBG')

base_map +
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    breaks = scales::breaks_width(width = 5),
                     values = scales::rescale(x = c(                                                 min(na.omit(joined_precip_geom$perc_change),
                             0),
                         max(na.omit(joined_precip_geom$perc_change)))
                       ))+
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))

```
