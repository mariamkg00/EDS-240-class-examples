#### Pre-class Prep

```{r message = FALSE}
# ................ load packages .........
library(tidyverse)

#................ import data ............
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")


# -------- wrangle data ---------------
jobs_clean <- jobs %>% 
  # add cols (needed for dumbbell plot)
  mutate(percent_male = 100 - percent_female,
         difference_earnings = total_earnings_male-total_earnings_female) %>% 
  # rearrange columns----
  relocate(year, major_category, minor_category,occupation,total_workers,workers_male,workers_female, percent_male, percent_female, total_earnings, total_earnings_male, total_earnings_female, difference_earnings, wage_percent_of_male) %>% 
  #drop rows with missing earning data 
  drop_na(total_earnings_male, total_earnings_female) %>% 
  # make occupation a factor ---- 
mutate(occupation = as.factor(occupation)) %>% 
  
  # ----- this next step is for making dumbbell plots ----

# classify jobs by percentage male or female ----
mutate(group_label = case_when(
  percent_female >= 75 ~ "Occupations that are 75%+ female",
  percent_female >= 45 & percent_female <= 55 ~ "Occupations that are 45-55% female",
  percent_male >= 75 ~ "Occupations that are 75%+ male"
))


```

### Visualizing data rankings

In this lesson we can explore two chart types:

1.  bar plots
2.  lollipop plots

### Bar plots

```{r}
jobs_clean %>% 
  filter(year == 2016) %>% 
  slice_max(order_by = total_earnings, n = 10) %>% 
  ggplot(aes(x = fct_reorder(occupation,total_earnings), y = total_earnings))+
  geom_col()+
  geom_text(aes(label = scales::dollar(total_earnings)), hjust = 1.2, color = 'white')+
  coord_flip()+
  scale_y_continuous(labels = scales::label_currency(accuracy = 1, scale = 0.001, suffix = 'k'))
# height of bar to represent total earnings ; make height of bar equivalent to total_earnings column



# 2 groups -----
jobs_clean %>% 
  filter(year == 2016) %>% 
  slice_max(order_by = total_earnings, n = 10) %>% 
  pivot_longer(cols = c(total_earnings_male,total_earnings_female),
               names_to = "group",
               values_to = "earnings_by_group") %>% 
  mutate(sex = str_remove(group, pattern = 'total_earnings_')) %>% 
  ggplot(aes(x = fct_reorder(occupation, earnings_by_group), 
             y = earnings_by_group, fill = sex))+
  geom_col(position = position_dodge())+
  coord_flip()
```

### Lollipop chart

```{r}
jobs_clean %>% 
  filter(year == 2016) %>% 
  slice_max(order_by = total_earnings, n = 10) %>% 
  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = total_earnings))+
  ggalt::geom_lollipop()+
  geom_text(aes(label = scales::dollar(total_earnings)), hjust = -.2)+
  scale_y_continuous(labels = scales::label_currency(accuracy = 1, scale = 0.001, suffix = 'k'),
                     limits = c(0,250000))+
  coord_flip()



# 2 groups ---- 
jobs_clean %>% 
  filter(year == 2016) %>% 
  slice_max(order_by = total_earnings, n = 10) %>% 
  pivot_longer(cols = c(total_earnings_male,total_earnings_female),
               names_to = "group",
               values_to = "earnings_by_group") %>% 
  mutate(sex = str_remove(group, pattern = 'total_earnings_')) %>% 
  ggplot(aes(x = fct_reorder(occupation, earnings_by_group), 
             y = earnings_by_group, color = sex))+
  geom_point(position = position_dodge(width = 0.5))+
  geom_linerange(aes(xmin = occupation, xmax = occupation,
                     ymin = 0, ymax = earnings_by_group),
                 position = position_dodge(width = 0.5))+
  coord_flip()
```

The axis of a bar or related plot must start at 0

-   are for categorical data

### Lollipop variant : dumbbell plot

Dumbell plots can be a really simple and intuitive way

-   `geom_segment()` and `geom_point()`

```{r}
#....guarantee the same random samples each time we run code.....
set.seed(0)

#.........get 10 random jobs that are 75%+ female (2016).........
f75 <- jobs_clean |> 
  filter(year == 2016, group_label == "Occupations that are 75%+ female") |> 
  slice_sample(n = 10)

#..........get 10 random jobs that are 75%+ male (2016)..........
m75 <- jobs_clean |> 
  filter(year == 2016, group_label == "Occupations that are 75%+ male") |> 
  slice_sample(n = 10)

#........get 10 random jobs that are 45-55%+ female (2016).......
f50 <- jobs_clean |> 
  filter(year == 2016, group_label == "Occupations that are 45-55% female") |> 
  slice_sample(n = 10)

#.......combine dfs & relevel factors (for plotting order).......
subset_jobs <- rbind(f75, m75, f50) |> 
  mutate(group_label = fct_relevel(group_label, "Occupations that are 75%+ female", 
                                   "Occupations that are 45-55% female", "Occupations that are 75%+ male")) 


# dumbbell plot ----
ggplot(subset_jobs)+
  geom_segment(aes(x = total_earnings_female, xend = total_earnings_male,
                   y = fct_reorder(occupation,total_earnings), yend = occupation))+
  geom_point(aes(x = total_earnings_male, y = occupation),
             color = "#CD93D8", size = 2.5)+
  geom_point(aes(x = total_earnings_female, y = occupation),
             color = "#6a1e99", size = 2.5)+
  facet_wrap(~group_label, nrow = 3, scales = 'free_y')

```

### 4.2 Visualizing Relationships

For visualizing the relationship between two numeric variables

The long-term data have contributed to important research, including the discovery of acid rain in North America. We will explore the effects of various compounds on stream water pH

```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(metajam) 
library(tidyverse)

#...................download data from DataOne...................
download_d1_data("https://cn.dataone.org/cn/v2/resolve/https%3A%2F%2Fpasta.lternet.edu%2Fpackage%2Fdata%2Feml%2Fknb-lter-hbr%2F208%2F9%2F3b3cf7ea447cb875d7c7d68ebdfd24c7",
                 path = here::here("week-4")) 

# read in the downloaded files ----
stream_chem_all <- read_d1_files(here::here("week-4","data"))

# get the data file ---
stream_chem_data <- stream_chem_all$data
```

```{r}
# basic scatter ----
stream_chem_data %>% 
  filter(waterYr == 2021) %>% 
  ggplot(aes(x = DOC, y = pH))+
  geom_point(alpha = 0.5)+
  geom_rug()

# ggExtra ---
p1 <- stream_chem_data %>% 
  filter(waterYr == 2021) %>% 
  ggplot(aes(x = DOC, y = pH))+
  geom_point(alpha = 0.5)

ggExtra::ggMarginal(p1,type = 'boxplot', margins = 'x')

# ggExtra --- multiple groups 
p2 <- stream_chem_data %>% 
  filter(waterYr == 2021) %>% 
  ggplot(aes(x = DOC, y = pH, color = site ))+
  geom_point(alpha = 0.5)+
  theme(legend.position = 'bottom')

ggExtra::ggMarginal(p2,type = 'density',groupFill = TRUE, groupColour = TRUE)
```

```{r}
stream_chem_data %>% 
  filter(waterYr == 2021) %>% 
  filter(site == 'W8') %>% 
  ggplot(aes(x = DOC, y = pH))+
  geom_point(alpha = 0.5)+
  geom_smooth(method = 'lm', se = FALSE)
```

```{r}
stream_chem_data %>% 
  filter(waterYr == 2021) %>% 
  ggplot(aes(x = DOC, y = pH, color = site, size = Al_ICP ))+
  geom_point(alpha = 0.5)+
  scale_size(range = c(1,10))
```

Challenges:

-   relationship between x and y will be the primary focus

-   it can be hard to compare the strengths of different associations

-   difficult to see the differences between the size

scale by area not by radius

Rather than making a bubble plot, make two separate scatter plots

Rather than coloring points by site, we can map color to them based on our third continuous numeric variable, Al_ICP.

-   also apply the viridis color map

```{r}
ggplot(stream_chem_data,aes(x = SO4, y = pH, color = site))+
  geom_point(size = 0.5, alpha = 0.5)+
  geom_rug()
```

```{r}
# binned 2d plot (heat map)
ggplot(stream_chem_data, aes(x = SO4, y = pH))+
  geom_bin2d()+
  scale_fill_viridis_c()

# geom hex
ggplot(stream_chem_data, aes(x = SO4, y = pH))+
  geom_hex()+
  scale_fill_viridis_c()+
  guides(fill = guide_colorbar(title = "Count",
                               barwidth = 1,
                               barheight = 15))
```
