## Waffle charts

-   offer an alternative way to show data, parts-to-whole relationship

```{r}
# bigfoot visualization

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(waffle)
library(showtext)

#..........................import data...........................
bigfoot <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-13/bigfoot.csv')

#..........................import fonts..........................
font_add_google(name = "Ultra", family = "ultra")
font_add_google(name = "Josefin Sans", family = "josefin")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ca_season_counts <- bigfoot |> 
  filter(state == "California") |> 
  group_by(season) |> 
  count(season) |> 
  filter(season != "Unknown") |> 
  arrange(match(season, c("Spring", "Summer", "Fall", "Winter"))) |> 
  ungroup() |> 
  mutate(season = fct_relevel(season, "Spring", "Summer", "Fall", "Winter"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                waffle chart                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#........................create palettes.........................
season_palette <- c("Spring" = "#357266", 
                    "Summer" = "#FFB813", 
                    "Fall" = "#983A06", 
                    "Winter" = "#005F71")

plot_palette <- c(gray = "#757473",
                  beige = "#EFEFEF")

#.......................create plot labels.......................
title <- "Summer is the season of Bigfoot sightings in CA"
subtitle <- "Winter, on the other hand, is a rare time to spot Sasquatch"
caption <- "Source: Bigfoot Field Researchers Organization"

#......................create waffle chart.......................
ggplot(ca_season_counts, aes(fill = season, values = n)) +
  geom_waffle(color = "white", size = 0.3, 
              n_rows = 10, make_proportional = TRUE) +
  coord_equal() +
  scale_fill_manual(values = season_palette) +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    plot.title = element_text(family = "ultra", 
                              size = 18, 
                              hjust = 0.5,
                              margin = margin(t = 0, r = 0, b = 0.3, l = 0, "cm")),
    plot.subtitle = element_text(family = "josefin",
                                 size = 16,
                                 hjust = 0.5,
                                 margin = margin(t = 0, r = 0, b = 0.5, l = 0, "cm")),
    plot.caption = element_text(family = "josefin",
                                size = 10,
                                color = plot_palette["gray"], 
                                margin = margin(t = 0.75, r = 0, b = 0, l = 0, "cm")),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(family = "josefin",
                               size = 12),
    plot.background = element_rect(fill = plot_palette["beige"], 
                                   color = plot_palette["beige"]),
    plot.margin = margin(t = 1.5, r = 9, b = 1.5, l = 8, "cm")
  )
```

Bump charts offer a way to visualize changes in rank over time

-   they do not provide information about the actual or relative magnitudes of difference between rankings

```{r message = FALSE, warning = FALSE}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(ggbump)
library(ggtext)
library(showtext)

#..........................import data...........................
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

#..........................import fonts..........................
font_add_google(name = "Passion One", family = "passion")
font_add_google(name = "Oxygen", family = "oxygen")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#...................rank occupations by salary...................
salary_rank_by_year <- jobs |> 
  select(year, occupation, total_earnings) |> 
  group_by(year) |> 
  mutate(
    rank = row_number(desc(total_earnings))
  ) |> 
  ungroup() |> 
  arrange(rank, year)

#..........get top 8 occupations for final year (2016)...........
top2016 <- salary_rank_by_year |>  
  filter(year == 2016, rank <= 8) |>  
  pull(occupation) 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                 bump chart                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.................create palette & assign colors.................
occupations_palette <- viridisLite::magma(12)
occupation_colors <- c(
  "Physicians and surgeons" = occupations_palette[3],
  "Nurse anesthetists" = occupations_palette[4],
  "Dentists" = occupations_palette[5],
  "Architectural and engineering managers" = occupations_palette[6],
  "Lawyers" = occupations_palette[7], 
  "Podiatrists" = occupations_palette[8],
  "Chief executives" = occupations_palette[9],
  "Petroleum engineers" = occupations_palette[10]
)

plot_palette <- c(dark_purple = "#2A114E", 
                  dark_gray = "#6D6B71",
                  light_pink = "#FFF8F4")

#.......................create plot labels.......................
title <- "Top eight highest paying occupations in 2016"
subtitle <- "Medical professionals held onto the same top three spots across years, while <span style='color:#FEA873FF;'>**petroleum engineers**</span> steadily climbed the ranks from 10^th^ in 2013 to 4^th^ in 2016"
caption <- "Data Source: Bureau of Labor Statistics"

#.....................bump chart

salary_rank_by_year %>% 
  filter(occupation %in% top2016) %>% 
  ggplot(aes(x = year, y = rank, color = occupation))+
  geom_point(shape = "|", size = 6)+
  geom_bump(linewidth = 1)+
  geom_text(
    data = salary_rank_by_year %>%  filter(year == 2013, occupation %in% top2016),
    aes(label = occupation),
    family = 'oxygen',
    fontface = 'bold',
    hjust = 1,
    nudge_x = -0.1
  )+
  scale_y_reverse()+
  scale_color_manual(values = occupation_colors)
  
```

```{r message = FALSE, warning = FALSE}
chat_gpt <- read_csv('ChatGPT_Practice_Dataset.xlsx - Sheet1.csv')

chat_new <- chat_gpt %>% 
  separate(col ="UniqueLabel,Name,Position,State,Salary,Years_Worked,Performance_Last_Year,Performance_2_Years_Ago" , into = c('Unique Label','Name','Position','State','Salary','Years_worked','Performance_last_year','Performance_two_years_ago'), sep = ',') 
chat_new$Performance_last_year <- as.numeric(chat_new$Performance_last_year)

chat_new$Performance_two_years_ago <- as.numeric(chat_new$Performance_two_years_ago)
chat_new$Average_Performance <- rowMeans(chat_new[, c("Performance_last_year", "Performance_two_years_ago")], na.rm = TRUE)


labels_to_remove <- c("Employee_38", "Employee_4", "Employee_22")

chat_bye <- chat_new[!chat_new$Name %in% labels_to_remove, ]

ggplot(chat_bye, aes(x = Position, y = Salary)) +
  geom_boxplot() +
  labs(x = "Position", y = "Salary")


# Perform ANOVA test
anova_result <- aov(Salary ~ Position, data = chat_bye)
# Summarize ANOVA results
summary(anova_result)
```
